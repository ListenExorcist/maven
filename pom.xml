<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- комментарий (ctrl + /) -->
    <!-- pom.xml - основной файл сборки maven. В этом файле описывается проект -->

    <!-- 1. GAV - Group Artifact Version - обязательные тэги:
     groupId, artifactId, version. Вся остальная информация считается необязательной -->
    <groupId>ru.itmo</groupId>
    <artifactId>maven-lesson</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!-- 2. Дополнительная информация о проекте -->
    <name>Maven Lesson</name> <!-- название проекта -->
    <description>Lesson about how to use maven</description> <!-- описание проекта -->
    <url>https://maven-lesson.com</url> <!-- ссылка на сайт проекта -->

    <!-- 3. Тип файла, который будет доступен в результате сборки.
     По умолчанию maven собирает .jar архив.
     Помимо этого можно собрать .war архив (для web приложений);
     .pom (для родительского модуля в модульной сборке);
     .ear (для enterprise) -->
    <packaging>jar</packaging>

    <!-- 4. Свойства проекта -->
    <properties>
        <!-- минимальная версия -->
        <maven.compiler.source>17</maven.compiler.source> <!-- версия исходного кода -->
        <maven.compiler.target>17</maven.compiler.target> <!-- версия скомпилированного кода -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <!-- кодировка кода -->

        <!-- локальные переменные (придуманные тэги) -->
        <lib.version>3.7</lib.version>
    </properties>

    <!-- 5. Репозитории - место, где хранятся артефакты: jar, war и т.д. файлы -->
    <!-- 5.1 Локальный репозиторий (на каждого пользователя) /.m2/repository -->
    <!-- 5.2 Центральный (глобальный) репозиторий - библиотеки доспутные всем -->
    <!-- 5.3 Корпоративный репозиторий - библиотеки для внутреннего пользования в фирме -->
    <!-- <repositories>
            <repository>
                <id>company-id-01</id>
                <url>company.com/repo</url>
            </repository>
            <repository>
                <id>company-id-02</id>
                <url>company.com/repo</url>
            </repository>
        </repositories> -->

    <!-- 6. Зависимости: библиотеки или фреймворки, необходимые для проекта -->
    <dependencies> <!-- все зависимости -->
        <!-- для каждой зависимости отдельный тэг dependency.
        Когда сборка видит, что нужно подключить к проекту зависимость,
        она сначала ищет ее в локальном репозитории, если не находит,
        обращается в центральный репозиторий и скачивает зависимость оттуда в
        локальный репозиторий. Это по умолчанию -->
        <!-- <dependency> --><!-- каждая конкретная зависимость -->
            <!-- <groupId></groupId> --><!-- обязательная информация -->
            <!-- <artifactId></artifactId> --><!-- обязательная информация -->
            <!-- <version></version> --><!-- рекомендуется указывать. Если не указать,
            сборка скачает последнюю версию. Если указать номер версии, например, 1.2,
            сборка сначала будет искать ее в локальном репозитории, затем в центральном.
            -SNAPSHOT означает, что данная версия находится в разработке. При каждой сборке проекта
            maven проверяет наличие обновлений в центральном репозитории и загружает последнее -->
            <!-- <scope></scope> --><!-- область видимости зависимости. Когда мы можем использовать классы зависимоти.
            Например, только при тестировании или только во время выполнения программы или только во время компиляции -->

            <!-- <scope>compile</scope> - значение по умолчанию. Зависимость доступна всегда -->

            <!-- <scope>test</scope> - Зависимость доступна только во время сборки тестирования
            Классы необходимые только для тестирования не попадают в jar (или другой архив) -->

            <!-- <scope>provided</scope> - Код библиотеки не будет доступен во время выполнения
            (не попадет в скомпилированные файлы) (аналогична compile, но не попадет в сборку)
            Так отмечаются библиотеки, которые генерируют код (например, геттеры и сеттеры).
            Код самой библиотеки не нужен, нужен только код, который она нагенерила -->

            <!-- <scope>system</scope>
            <systemPath>путь к библиотеке на компьютере разработчика</systemPath> -->

            <!-- <scope>import</scope> - используется в модульной сборке -->

            <!-- <scope>runtime</scope> - зависимость доступна только во время выполнения.
            Нет прямого доступа к коду библиотеки при написании кода. Сделать импорт не получится -->
        <!-- </dependency> -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <!-- Основные фазы сборки (основные этапы жизненного цикла): -->
    <!-- 1. clean - удаление папки target со всем ее содержимым (фаза может выполняться самостоятельно или
            предшествовать другим фазам, например compile)  -->
    <!-- 2. validate - проверка исходного кода  -->
    <!-- 3. compile - компиляция (фазе предшествуют фазы clean и validate)  -->
    <!-- 4. test - запуск тестов (фаза выполняется самостоятельно)  -->
    <!-- 5. package - создание архива, тип определен тегом packaging
            (фазе предшествуют фазы clean, validate, compile)  -->
    <!-- 6. verify - проверяет артефакт для последующей отправки в maven репозиторий  -->
    <!-- 7. install - добавление артефакта в локальный репозиторий  -->
    <!-- 8. deploy - добавление артефакта в удаленный репозиторий  -->
    <!-- 9. site - генерация документации, сайта проекта  -->

    <build>
        <plugins> <!-- все плагины -->
            <!-- можно использовать плагины, подключенные по умолчанию,
                 можно настаивать их или заменять другими -->

            <plugin> <!-- конкретный плагин (генерация сайта приложения) -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>3.9.1</version>
                <configuration> <!-- дополнительные настройки плагина-->
                    <!-- на каких языках должен быть сгенерированы страницы -->
                    <locales>en,ru</locales>
                </configuration>
                <!-- по умолчанию привязан к фазе site -->
            </plugin>

            <plugin> <!-- генерация документации -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <!--   дополнительные настройки плагина-->
                <configuration>
                    <show>private</show>
                </configuration>
                <!-- привязка к фазам сборки-->
                <executions>
                    <execution>
                        <phase>site</phase> <!-- привязали к фазе site-->
                        <goals>
                            <!-- задача, которую должен выполнить плагин на указанных фазах сборки-->
                            <goal>aggregate</goal> <!-- создать документация -->
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>